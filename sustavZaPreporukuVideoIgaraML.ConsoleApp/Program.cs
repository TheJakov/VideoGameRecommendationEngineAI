// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using SustavZaPreporukuVideoIgaraML.Model;

namespace SustavZaPreporukuVideoIgaraML.ConsoleApp
{
    class Program
    {
        //Dataset to use for predictions 
        private const string DATA_FILEPATH = @"C:\Users\Fabijan\Documents\GitHub\VideoGameRecommendationEngineAI\INTS - List of all games.csv";

        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            ModelInput sampleData = CreateSingleDataSample(DATA_FILEPATH);

            // Make a single prediction on the sample data and print results
            ModelOutput predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Game_name_id with predicted Game_name_id from sample data...\n\n");
            Console.WriteLine($"platform: {sampleData.Platform}");
            Console.WriteLine($"esrb: {sampleData.Esrb}");
            Console.WriteLine($"singleplayer: {sampleData.Singleplayer}");
            Console.WriteLine($"multyplayer: {sampleData.Multyplayer}");
            Console.WriteLine($"coop: {sampleData.Coop}");
            Console.WriteLine($"price: {sampleData.Price}");
            Console.WriteLine($"ign_rating: {sampleData.Ign_rating}");
            Console.WriteLine($"campaign_duration: {sampleData.Campaign_duration}");
            Console.WriteLine($"is_popular: {sampleData.Is_popular}");
            Console.WriteLine($"char_customization: {sampleData.Char_customization}");
            Console.WriteLine($"world_size: {sampleData.World_size}");
            Console.WriteLine($"world_diversity: {sampleData.World_diversity}");
            Console.WriteLine($"graphics: {sampleData.Graphics}");
            Console.WriteLine($"period: {sampleData.Period}");
            Console.WriteLine($"modding: {sampleData.Modding}");
            Console.WriteLine($"competitive: {sampleData.Competitive}");
            Console.WriteLine($"genre: {sampleData.Genre}");
            Console.WriteLine($"type: {sampleData.Type}");
            Console.WriteLine($"optimization: {sampleData.Optimization}");
            Console.WriteLine($"\n\nActual Game_name_id: {sampleData.Game_name_id} \nPredicted Game_name_id value {predictionResult.Prediction} \nPredicted Game_name_id scores: [{String.Join(",", predictionResult.Score)}]\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        // Change this code to create your own sample data
        #region CreateSingleDataSample
        // Method to load single row of dataset to try a single prediction
        private static ModelInput CreateSingleDataSample(string dataFilePath)
        {
            // Create MLContext
            MLContext mlContext = new MLContext();

            // Load dataset
            IDataView dataView = mlContext.Data.LoadFromTextFile<ModelInput>(
                                            path: dataFilePath,
                                            hasHeader: true,
                                            separatorChar: ',',
                                            allowQuoting: true,
                                            allowSparse: false);

            // Use first line of dataset as model input
            // You can replace this with new test data (hardcoded or from end-user application)
            ModelInput sampleForPrediction = mlContext.Data.CreateEnumerable<ModelInput>(dataView, false)
                                                                        .First();
            return sampleForPrediction;
        }
        #endregion
    }
}
